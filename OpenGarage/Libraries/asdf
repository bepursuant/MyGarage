  {"firmware_version", FIRMWARE_VERSION, 255, ""},
  {"sensor_type", SENSORTYPE_ULTRASONIC_CEILING, 2, ""},
  {"dth", 50, 65535, ""},
  {"read_interval", 4, 300, ""},
  {"http_port", 80, 65535, ""},
  {"mode", OG_MODE_AP, 255, ""},
  {"ssid", 0, 0, ""},  // string options have 0 max value
  {"pass", 0, 0, ""},
  {"devicekey", 0, 0, DEFAULT_DEVICEKEY},
  {"name", 0, 0, DEFAULT_NAME}



  void OpenGarage::options_load() {
  Log.info("Loading config file [%s]...", config_fname);

  File file = SPIFFS.open(config_fname, "r");
  if(!file) {
    DEBUG_PRINTLN(F("failed!"));
    return;
  }

  while(file.available()) {
    String name = file.readStringUntil(':');
    String sval = file.readStringUntil('\n');
    sval.trim();
    int idx = find_option(name);
    if(idx<0) continue;
    if(options[idx].max) {  // this is an integer option
      options[idx].ival = sval.toInt();
    } else {  // this is a string option
      options[idx].sval = sval;
    }
  }
  file.close();

  Log.info("ok!\r\n");
}

void OpenGarage::options_save() {
  DEBUG_PRINT(F("Saving config file "));
  DEBUG_PRINT(config_fname);
  DEBUG_PRINT(F("..."));

  File file = SPIFFS.open(config_fname, "w");
  if(!file) {
    DEBUG_PRINTLN(F("failed!"));
    return;
  }

  OptionStruct *o = options;
  for(byte i=0;i<NUM_OPTIONS;i++,o++) {
    file.print(o->name + ":");
    if(o->max){
      file.println(o->ival);
    }else{
      file.println(o->sval);
    }
  }
  file.close();

  DEBUG_PRINTLN(F("ok!\r\n"));  
}

void OpenGarage::options_setup() {
  if(!SPIFFS.exists(config_fname)) { // if config file does not exist
    DEBUG_PRINT(F("Saving default config to SPIFFS..."));
    options_save(); // save default option values
    DEBUG_PRINTLN(F("ok!\r\n"));
    return;
  }
  options_load();
  
  if(options[OPTION_FIRMWARE_VERSION].ival != FIRMWARE_VERSION)  {
    // if firmware version has changed
    // re-save options, thus preserving
    // shared options with previous firmwares
    options[OPTION_FIRMWARE_VERSION].ival = FIRMWARE_VERSION;
    options_save();
    return;
  }
}

void OpenGarage::options_reset() {
  DEBUG_PRINT(F("Resetting options to factory default..."));
  if(!SPIFFS.remove(config_fname)) {
    DEBUG_PRINTLN(F("failed!"));
    return;
  }
  DEBUG_PRINTLN(F("ok!\r\n"));
}


int OpenGarage::find_option(String name) {
  for(byte i=0;i<NUM_OPTIONS;i++) {
    if(name == options[i].name) {
      return i;
    }
  }
  return -1;
}



typedef enum {
  OPTION_FIRMWARE_VERSION = 0, // firmware version
  OPTION_SENSOR_TYPE,     // sensor type
  OPTION_DTH,         // distance threshold
  OPTION_RIV,         // read interval
  OPTION_HTTP_PORT,     // http port
  OPTION_MOD,         // mode
  OPTION_SSID,        // wifi ssid
  OPTION_PASS,        // wifi password
  OPTION_DEVICEKEY,     // device key
  OPTION_NAME,        // device name
  NUM_OPTIONS         // number of options
} OG_OPTION_enum;




firmware_version = ;
sensor_type = ;
dth = ;
read_interval = ;
http_port = ;
name = ;
auth = ;
smtp_notify_boot = ;
smtp_notify_status = ;
smtp_host = ;
smtp_port = ;
smtp_user = ;
smtp_pass = ;
smtp_from = ;
smtp_to = ;
smtp_subject = ;